<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\mollom\Entity\FormInterface;

/**
 * Implements hook_module_implements_alter().
 */
function limograde_grade_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter') {
    // Move limograde_grade_form_alter() to the end of the $implementations array.
    // Drupal::moduleHandler()->getImplementations() iterates $implementations in FIFO order.
    $group = $implementations['limograde_grade'];
    unset($implementations['limograde_grade']);
    $implementations['limograde_grade'] = $group;
  }
}

/**
 * Implements hook_form_alter().
 */
function limograde_grade_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Give mollom items bootstrap-panel styles.
  if (array_key_exists('mollom', $form)) {
    $form['mollom']['#attributes'] = array(
      'class' => array(
        'panel',
        'panel-default',
        'panel-body',
      ),
    );
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function limograde_grade_form_grade_add_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $request = \Drupal::request();
  if ($company_nid = $request->query->get('company')) {
    // Show a company teaser above the grading form.
    $entity_manager = \Drupal::entityManager();
    $entity = $entity_manager->getStorage('node')->load($company_nid);
    $view_builder = $entity_manager->getViewBuilder('node');
    $output = $view_builder->view($entity, 'mini');
    $form['company_teaser'] = array(
      '#type' => 'markup',
      '#markup' => drupal_render($output),
      '#weight' => -10,
    );
    // Hide the company reference on add form.
    $form['field_company']['widget'][0]['target_id']['#type'] = 'hidden';
    $form['field_company']['widget'][0]['target_id']['#value'] = $company_nid;
  }
  if (!\Drupal::currentUser()->hasPermission('edit grade entities')) {
    unset($form['actions']['publish']);
  }
}

/**
 * Implements hook_theme().
 */
function limograde_grade_theme() {
  return [
    'grade' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Implements hook_preprocess_ENTITY().
 */
function limograde_grade_preprocess_grade(&$variables) {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  $entity = $variables['elements']['#grade'];

  $timestamp = $entity->get('created')->value;
  $created = \Drupal::service('date.formatter')->format($timestamp, 'medium');
  $variables['created'] = '<div class="field field--name-created field--type-list-created field--label-inline"><div class="field--label">Posted</div><div class="field--item">'. $created .'</div></div>';

  $variables['url'] = $entity->url('canonical', [
    'language' => $entity->language(),
  ]);

  $variables += ['content' => []];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];

    if (\Drupal::currentUser()->hasPermission('edit grade entities')) {
      $path = \Drupal::service('path.current')->getPath();
      $alias = \Drupal::service('path.alias_manager')->getAliasByPath($path);

      $variables['edit'] = array(
        '#type' => 'markup',
        '#markup' => '<a href="/grade/'. $entity->id() . '/edit?destination='. $alias .'" class="btn btn-xs btn-default">Edit</a>',
        '#weight' => -10,
      );
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function limograde_grade_theme_suggestions_grade(array $variables) {
  $suggestions = [];
  $grade = $variables['elements']['#grade'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
  $suggestions[] = 'grade__' . $sanitized_view_mode;
  $suggestions[] = 'grade__' . $grade->id();
  $suggestions[] = 'grade__' . $grade->id() . '__' . $sanitized_view_mode;
  return $suggestions;
}

/**
 * Implements hook_mollom_form_list().
 */
function limograde_grade_mollom_form_list() {
  $forms['grade_add_form'] = array(
    'title' => t('Grade entity add form'),
    'mode' => FormInterface::MOLLOM_MODE_CAPTCHA,
  );
  return $forms;
}

/**
 * Implements hook_mollom_form_info().
 */
function limograde_grade_mollom_form_info($form_id) {
  switch ($form_id) {
    case 'grade_add_form':
      $form_info = array(
        'bypass access' => array('bypass mollom protection'),
      );
      return $form_info;
  }
}
